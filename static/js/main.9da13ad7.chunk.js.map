{"version":3,"sources":["actions/types.js","reducers/moviesReducer.js","reducers/index.js","store.js","components/EditMovieModal.js","actions/postsAction.js","components/MovieRating.js","components/MovieOverViewModal.js","components/MovieGenres.js","components/AllMovies.js","components/NewMovieForm.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["FETCH_MOVIES","UPDATE_MOVIE","NEW_MOVIE","initialState","items","item","combineReducers","movies","state","arguments","length","undefined","action","type","Object","objectSpread","payload","movie","map","id","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","EditMovieModal","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleShow","bind","assertThisInitialized","handleClose","onChange","onClick","handleOverview","handleTitle","show","title","overview","setState","e","target","value","defineProperty","name","currMovieObj","currMovie","original_title","updateMovie","_this2","react_default","a","createElement","Button","bsStyle","bsSize","className","Modal","Header","closeButton","closeLabel","Body","placeholder","Footer","Component","connect","postData","dispatch","MovieRating","prmAverage","currAvarege","Math","ceil","toString","starIcons","currAvaregeInt","roundAvarege","currAverage","i","push","key","MovieOverViewModal","movieObj","poster_path","alt","src","concat","img","MovieRating_MovieRating","vote_average","MovieGenres","movieGenresIds","moviesGenresIds","genresFromApi","movieGenres","genres","currMovieGenresArr","ind01","currMovieItem","ind02","getMovieGenres","genresArr","AllMovies","fetch","then","response","json","fetchMovies","nextProps","newMovie","unshift","movieDate","movieFormatedDate","Moment","format","newMoovieDate","Date","_this3","movieItems","movieItem","formatDate","release_date","vote_count","MovieGenres_MovieGenres","genre_ids","components_EditMovieModal","MovieOverViewModal_MovieOverViewModal","editedMovie","res","NewMovieForm","isOpenAddNewMovie","addNewMovie","onSubmit","preventDefault","getState","App","es","components_Header","components_NewMovieForm","components_AllMovies","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9da13ad7.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const FETCH_MOVIES = 'FETCH_MOVIES';\r\nexport const UPDATE_MOVIE = 'UPDATE_MOVIE';\r\nexport const NEW_MOVIE = 'NEW_MOVIE';\r\n","import {FETCH_MOVIES, UPDATE_MOVIE, NEW_MOVIE} from '../actions/types';\r\n\r\nconst initialState = {\r\n\r\n    items: [],\r\n    item: {},\r\n    \r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_MOVIES:\r\n\r\n            return {\r\n                ...state,\r\n\r\n                items: action.payload\r\n            };\r\n\r\n        case UPDATE_MOVIE:\r\n            const movie = action.payload;\r\n            return {\r\n                ...state,\r\n                items: state\r\n                    .items\r\n                    .map(item => item.id === movie.id\r\n                        ? movie\r\n                        : item)\r\n            }\r\n\r\n        case NEW_MOVIE:\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport moviesReducer from \"./moviesReducer\";\r\n\r\nexport default combineReducers({\r\n    movies: moviesReducer\r\n});\r\n","import {createStore, applyMiddleware,compose} from \"redux\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n     initialState,\r\n     compose(\r\n         applyMiddleware(...middleware),\r\n         window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    ) \r\n);\r\n      \r\n\r\nexport default store;\r\n","import React, {Component} from 'react';\r\nimport {Modal} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport {updateMovie} from '../actions/postsAction';\r\n\r\nclass EditMovieModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleShow = this\r\n            .handleShow\r\n            .bind(this);\r\n        this.handleClose = this\r\n            .handleClose\r\n            .bind(this);\r\n            this.onChange = this\r\n            .onChange\r\n            .bind(this);\r\n        this.onClick = this\r\n            .onClick\r\n            .bind(this);\r\n            this.handleOverview = this\r\n            .handleOverview\r\n            .bind(this);\r\n            this.handleTitle = this\r\n            .handleTitle\r\n            .bind(this);\r\n\r\n        this.state = {\r\n            show: null,\r\n            id:'',\r\n            title: '',\r\n            overview:'',\r\n        }\r\n        \r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({show: null});\r\n    }\r\n\r\n    handleShow(id) {\r\n        this.setState({show: id});\r\n    }\r\n\r\n    handleOverview(e) {\r\n        this.setState({overview: e.target.value});\r\n    }\r\n\r\n    handleTitle(e) {\r\n        this.setState({title: e.target.value});\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n\r\n    }\r\n\r\n    onClick(e) {\r\n       \r\n        const currMovieObj = this.props.currMovie;\r\n        currMovieObj.original_title = this.state.title;\r\n        currMovieObj.title = this.state.title;\r\n        currMovieObj.overview = this.state.overview;\r\n        this.props.updateMovie(currMovieObj);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <Button\r\n                    bsStyle=\"primary\"\r\n                    bsSize=\"small\"\r\n                    onClick={() => this.handleShow(this.props.currMovie.id)}>\r\n                    <span>\r\n                        <i className=\"fa fa-pencil\"></i>\r\n                    </span>\r\n                </Button>\r\n\r\n                <Modal show={this.state.show === this.props.currMovie.id}>\r\n                    <Modal.Header\r\n                        onClick={() => this.handleClose()}\r\n                        closeButton\r\n                        closeLabel=\"close window\"></Modal.Header>\r\n                    <Modal.Body>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            onChange={this.handleTitle}\r\n                            value={this.state.title}\r\n                            placeholder={this.props.currMovie.title}/>\r\n\r\n                        <textarea\r\n                            name=\"body\"\r\n                            className=\"form-control\"\r\n                            onChange={this.handleOverview}\r\n                            value={this.state.overview}\r\n                            placeholder={this.props.currMovie.overview}/>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <button type=\"button\" \r\n                    onClick={this.onClick}\r\n                    className=\"btn btn-primary\">\r\n                                    submit</button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nEditMovieModal.propTypes = {\r\n    updateMovie: propTypes.func.isRequired\r\n}\r\nexport default connect(null, {updateMovie})(EditMovieModal);","import { FETCH_MOVIES, UPDATE_MOVIE, NEW_MOVIE} from './types';\r\n\r\nexport function fetchMovies() {\r\n\r\n    return function (dispatch) {\r\n        fetch('https://api.themoviedb.org/3/movie/now_playing?api_key=82e0e5a56b04994581c0700e5' +\r\n                    'd61a2e5')\r\n            .then(res => res.json())\r\n            .then(movies => dispatch({type: FETCH_MOVIES, payload: movies['results']}));\r\n    }\r\n};\r\n\r\n// export function fetchGenres() {\r\n//     console.log(23)\r\n//     return function (dispatch) {\r\n//         fetch('https://api.themoviedb.org/3/genre/movie/list?api_key=82e0e5a56b04994581c0700e5d' +\r\n//         '61a2e5')\r\n//             .then(res => res.json())\r\n//             .then(genres => dispatch({type: FETCH_GENRES, payload:genres['genres']}));\r\n//     }\r\n    \r\n// };\r\n\r\n\r\nexport function addNewMovie(postData) {\r\n   \r\n    return function (dispatch) {\r\n        dispatch({type: NEW_MOVIE, payload: postData});\r\n    }\r\n\r\n};\r\n\r\nexport function updateMovie(postData) {\r\n\r\n    return function (dispatch) {\r\n        dispatch({type: UPDATE_MOVIE, payload: postData});\r\n    }\r\n};\r\n","import React, {Component} from 'react'\r\n\r\nexport default class MovieRating extends Component {\r\n\r\n    roundAvarege(prmAverage) {\r\n        var currAvarege = Math.ceil(prmAverage);\r\n        currAvarege = 10 - currAvarege;\r\n        return currAvarege.toString();\r\n    }\r\n    render() {\r\n        var starIcons = [];\r\n        var currAvaregeInt = this.roundAvarege(this.props.currAverage);\r\n        for (var i = 0; i < currAvaregeInt; i++) {\r\n            starIcons.push(\r\n                <span className='ratingStar' key={i}>\r\n                    <i className=\"fa fa-star\"></i>\r\n                </span>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {starIcons}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Modal} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\nimport MovieRating from './MovieRating';\r\n\r\nexport default class MovieOverViewModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleShow = this\r\n            .handleShow\r\n            .bind(this);\r\n        this.handleClose = this\r\n            .handleClose\r\n            .bind(this);\r\n\r\n        this.state = {\r\n            show: null\r\n        }\r\n\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({show: null});\r\n    }\r\n\r\n    handleShow(id) {\r\n        this.setState({show: id});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button\r\n                    className=\"btn btn-link read-more-btn\"\r\n                    onClick={() => this.handleShow(this.props.movieObj.id)}>\r\n                    <span>\r\n                        Read More\r\n                    </span>\r\n                </Button>\r\n\r\n                <Modal show={this.state.show === this.props.movieObj.id}>\r\n                    <Modal.Header\r\n                        onClick={() => this.handleClose()}\r\n                        closeButton\r\n                        closeLabel=\"close window\"></Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"movie-overview-modal\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6\">\r\n                                    {this.props.movieObj.poster_path\r\n                                        ? (<img alt=\"\" className=\"img-responsive\" src={`https://image.tmdb.org/t/p/w500${this.props.movieObj.poster_path}`}/>)\r\n                                        : (<img alt=\"\" className=\"img-responsive\" src={`${this.props.movieObj.img}`}/>)}\r\n                                </div>\r\n                                <div className=\"col-md-6\">\r\n                                    <p className=\"movie-title\">{this.props.movieObj.title}</p>\r\n                                    <p>{this.props.movieObj.overview}</p>\r\n                                    <MovieRating currAverage={this.props.movieObj.vote_average}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Modal.Body>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class MovieGenres extends Component {\r\n\r\n    \r\n\r\n    getMovieGenres() {\r\n\r\n        var movieGenresIds = this.props.moviesGenresIds;\r\n        var genresFromApi = this.props.genresFromApi;\r\n\r\n        if (!!genresFromApi) {\r\n\r\n            var movieGenres = genresFromApi;\r\n            movieGenres = movieGenres.genres;\r\n            var currMovieGenresArr = [];\r\n            for (var ind01 = 0; ind01 < movieGenresIds.length; ind01++) {\r\n\r\n                var currMovieItem = movieGenresIds[ind01];\r\n                for (var ind02 = 0; ind02 < movieGenres.length; ind02++) {\r\n\r\n                    if (currMovieItem === movieGenres[ind02].id) {\r\n                        currMovieGenresArr.push(movieGenres[ind02].name)\r\n                    }\r\n                }\r\n            }\r\n\r\n            return currMovieGenresArr;\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n    \r\n       const currMovieGenresArr = this.getMovieGenres();\r\n        const genresArr = [];\r\n        if (!!currMovieGenresArr) {\r\n            for (var i = 0; i < currMovieGenresArr.length; i++) {\r\n               \r\n\r\n                if( i === currMovieGenresArr.length -1){\r\n                    genresArr.push(\r\n                        <span className='curr-genre' key={i}>\r\n                            {currMovieGenresArr[i]+' '}\r\n                        </span>\r\n                    );\r\n                } else{\r\n                    genresArr.push(\r\n                        <span className='curr-genre' key={i}>\r\n                            {currMovieGenresArr[i]+', '}\r\n                        </span>\r\n                    );\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {genresArr}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport propTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport {fetchMovies} from '../actions/postsAction';\r\nimport EditMovieModal from './EditMovieModal';\r\nimport MovieRating from './MovieRating';\r\nimport Moment from 'moment';\r\nimport MovieOverViewModal from './MovieOverViewModal';\r\nimport MovieGenres from './MovieGenres';\r\n\r\n\r\nclass AllMovies extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          genres: [],\r\n        };\r\n      }\r\n\r\n\r\n    componentWillMount() {\r\n        \r\n        fetch('https://api.themoviedb.org/3/genre/movie/list?api_key=82e0e5a56b04994581c0700e5d' +\r\n        '61a2e5')\r\n        .then(response => response.json())\r\n        .then(genres => this.setState({ genres }));\r\n      \r\n        this.props.fetchMovies();\r\n       \r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if (nextProps.newMovie) {\r\n            this\r\n                .props\r\n                .movies\r\n                .unshift(nextProps.newMovie);\r\n        }\r\n    }\r\n    formatDate(movieDate) {\r\n\r\n        var movieFormatedDate = '';\r\n        if (!!movieDate) {\r\n            movieFormatedDate = Moment(movieDate.toString()).format('DD-MM-YYYY');\r\n\r\n        } else {\r\n\r\n            var newMoovieDate = new Date();\r\n            movieFormatedDate = Moment(newMoovieDate.toString()).format('DD-MM-YYYY');\r\n\r\n        }\r\n\r\n        return movieFormatedDate;\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        const movieItems = this\r\n            .props\r\n            .movies\r\n            .map(movieItem => (\r\n\r\n                <div key={movieItem.id}>\r\n                    <div className=\"movie-card-item\">\r\n                        <div className=\"panel panel-primary\">\r\n                            <div className=\"panel-heading\">\r\n                                <div className=\"moviePosterCard\">\r\n                                    {movieItem.poster_path\r\n                                        ? (<img alt=\"\" src={`https://image.tmdb.org/t/p/w500${movieItem.poster_path}`}/>)\r\n                                        : (<img alt=\"\" src={`${movieItem.img}`}/>)}\r\n                                </div>\r\n                                <div className=\"movieInfoCard\">\r\n                                    <div className=\"movie-info-card-wrapper\">\r\n                                        <div className=\"movie-release-date\">\r\n                                            <span className=\"italic-title\">Released</span>\r\n                                            <span className=\"movie-release-date-date\">{this.formatDate(movieItem.release_date)}</span>\r\n                                        </div>\r\n                                        <div className=\"movie-rating\">\r\n\r\n                                            <span className=\"italic-title\">\r\n                                                {movieItem.vote_count}&nbsp; Fan Ratings</span>\r\n                                            <MovieRating currAverage={movieItem.vote_average}/>\r\n                                        </div>\r\n                                        <div className=\"movie-genres\">\r\n                                        <span className=\"italic-title\">\r\n                                               Movie Genres</span>\r\n                                         <MovieGenres moviesGenresIds={movieItem.genre_ids} genresFromApi={this.state.genres}  />\r\n                                           \r\n                                           \r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div className=\"panel-body\">\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-12\">\r\n                                            <span className=\"movie-title\">{movieItem.title}</span>\r\n\r\n                                            <span className=\"pull-right edit-movie-btn\">\r\n                                                <EditMovieModal currMovie={movieItem}/>\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"movie-overview\">\r\n                                            {movieItem.overview}\r\n\r\n                                        </div>\r\n                                        <MovieOverViewModal movieObj={movieItem}/>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ));\r\n        return (\r\n            <div>\r\n                {movieItems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAllMovies.propTypes = {\r\n    fetchMovies: propTypes.func.isRequired,\r\n   \r\n    movies: propTypes.array.isRequired,\r\n   \r\n    // newPost: propTypes.object\r\n}\r\nconst mapStateToProps = state => ({genres: state.genres, movies: state.movies.items, newMovie: state.movies.item, editedMovie: state.movies.item})\r\n\r\nexport default connect(mapStateToProps, {fetchMovies})(AllMovies);\r\n","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport propTypes from 'prop-types';\r\nimport {addNewMovie} from '../actions/postsAction';\r\nimport store from '../store';\r\nclass NewMovieForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            overview: '',\r\n            img: '',\r\n            genre_ids:'',\r\n            isOpenAddNewMovie: true\r\n        }\r\n        this.addNewMovie = this\r\n            .addNewMovie\r\n            .bind(this);\r\n        this.onChange = this\r\n            .onChange\r\n            .bind(this);\r\n        this.onSubmit = this\r\n            .onSubmit\r\n            .bind(this);\r\n    }\r\n    onChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    addNewMovie() {\r\n\r\n        if (!this.state.isOpenAddNewMovie) {\r\n            this.setState({isOpenAddNewMovie: true});\r\n\r\n        } else {\r\n            this.setState({isOpenAddNewMovie: false});\r\n\r\n        }\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const currState = store\r\n            .getState()\r\n            .movies\r\n            .items;\r\n\r\n        const newMovie = {\r\n            id: currState.length + 1,\r\n            title: this.state.title,\r\n            overview: this.state.overview,\r\n            img: this.state.img,\r\n            genre_ids: this.state.genre_ids,\r\n        }\r\n        this\r\n            .props\r\n            .addNewMovie(newMovie);\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n\r\n                <div className=\"panel panel-success\">\r\n                    <div className=\"panel-heading\">\r\n                        <span className=\"pull-left\">Add New Movie</span>\r\n                        <button onClick={this.addNewMovie} className=\"pull-right btn btn-primary\">Add New Movie</button>\r\n                    </div>\r\n                    {this.state.isOpenAddNewMovie !== true\r\n                        ? <div className=\"panel-body\">\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                    <label>Title</label>\r\n                                        <br/>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"title\"\r\n                                            onChange={this.onChange}\r\n                                            value={this.state.value}/>\r\n                                        \r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Image Url</label>\r\n                                        <br/>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"img\"\r\n                                            onChange={this.onChange}\r\n                                            value={this.state.img}/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Movie Genres</label>\r\n                                        <br/>\r\n                                        <input\r\n                                            className=\"form-control\"\r\n                                            type=\"text\"\r\n                                            name=\"img\"\r\n                                            onChange={this.onChange}\r\n                                            value={this.state.genre_ids}/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Movie Description</label>\r\n                                        <br/>\r\n                                        <textarea\r\n                                            name=\"overview\"\r\n                                            className=\"form-control\"\r\n                                            onChange={this.onChange}\r\n                                            value={this.state.overview}/>\r\n                                    </div>\r\n                                    <br/>\r\n                                    <div>\r\n                                        <button type=\"submit\" className=\"btn btn-primary\">\r\n                                            submit</button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        : <div></div>\r\n}\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nNewMovieForm.propTypes = {\r\n    addNewMovie: propTypes.func.isRequired\r\n}\r\nexport default connect(null, {addNewMovie})(NewMovieForm);","import React from 'react';\r\n\r\nconst Header = () => {\r\n   \r\n        return (\r\n            <div className=\"banner\">\r\n                <div className =\"main_cover\">\r\n                  <div className = \"logo\">MOVIES-DB</div>\r\n                </div>\r\n               \r\n           </div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\n// import './App.css';\nimport { Provider} from 'react-redux';\nimport store from './store';\nimport Movies from './components/AllMovies';\nimport NewMovieForm from './components/NewMovieForm';\nimport Header from './components/Header';\n\nclass App extends Component {\n  render() {\n    \n    return (\n    \n      <Provider store={store}>\n      <div className=\"App\">\n      <Header/>\n         <div className=\"container\">\n         \n         <NewMovieForm/>\n         \n          <Movies/>\n         </div>\n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}